apply plugin: 'com.android.application'

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.dsource.idc.jellowintl"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 86
        versionName "4.0.2"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled true
            applicationIdSuffix ".debug"
            buildConfigField "String", "DB_TYPE", '"testing"'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            buildConfigField "String", "DB_TYPE", '"production"'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    dataBinding {
        enabled = true
    }
    bundle{
        language{
            enableSplit = false
        }
    }
    testOptions{
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.constraintlayout:constraintlayout:2.1.1"
    implementation 'com.google.android.play:core:1.10.2'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation platform('com.google.firebase:firebase-bom:26.0.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-appindexing'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-database'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.akexorcist:RoundCornerProgressBar:2.0.3'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'androidx.annotation:annotation:1.3.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.github.ghost1372:Mzip-Android:0.4.0'
    implementation 'com.liulishuo.filedownloader:library:1.7.5'
    implementation 'com.github.rey5137:material:1.2.5'
    implementation 'com.github.paolorotolo:appintro:4.1.0'
    implementation 'com.hbb20:ccp:2.2.4'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.github.CanHub:Android-Image-Cropper:4.0.0'
    implementation 'com.bignerdranch.android:expandablerecyclerview:3.0.0-RC1'

    implementation('com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:1.0.0@aar') {
        transitive = true
    }
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.23'

    implementation 'androidx.room:room-runtime:2.3.0'
    annotationProcessor "androidx.room:room-compiler:2.3.0"

    // Optional -- JUnit test framework
    androidTestImplementation 'junit:junit:4.13.2'
    // Optional -- Robolectric environment
    androidTestImplementation 'androidx.test:core:1.4.0'
    /* Required for Espresso library*/
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'

    testImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:2.25.0'
    testImplementation 'org.testng:testng:6.9.6'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation "org.robolectric:shadows-multidex:4.0.1"
    androidTestImplementation 'org.mockito:mockito-android:2.7.22'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.hiya.jacoco-android'

jacoco {
    toolVersion = "0.8.3"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoUnifiedUnitInstrumentationTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
    def execDataTree = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])

    getSourceDirectories().setFrom([mainSrc])
    getClassDirectories().setFrom([debugTree])
    getExecutionData().setFrom([execDataTree])
}
